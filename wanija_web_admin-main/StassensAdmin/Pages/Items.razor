@page "/items"

@inject IJSRuntime JSRuntime
@inject IApiService apiService
@inject IApiService apiService2
@inject IFileUpload fileUpload
@inject ILocalStorageService localStore
@inject NavigationManager NavManager
@inject IConfiguration Configuration

<SideMenu activeValue="items" />

<div id="main">
    <header class="mb-3">
        <button class="btn sidenavOpen burger-btn d-block d-xl-none">
            <i class="bi bi-justify fs-3"></i>
        </button>
    </header>

    <div class="page-heading">

        <div class="page-title">
            <div class="row">
                <div class="col-12 col-md-6 order-md-1 order-last">
                    <h3>Items</h3>
                </div>
                @*<div class="col-12 col-md-6 order-md-2 order-first">
                        <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Items</li>
                            </ol>
                        </nav>
                    </div>*@
            </div>
        </div>

        <section id="multiple-column-form">
            <div class="row match-height">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            @if (isUpdate)
                            {
                                <h4 class="card-title">Update Item</h4>
                            }
                            else
                            {
                                <h4 class="card-title">New Item</h4>
                            }
                        </div>

                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Item Code <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="sku"></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Item Name <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="name"></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Description</label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><textarea class="form-control" @bind="description"></textarea></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Cost <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="cost"></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Selling Price <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="sellingPrice"></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Regular Price <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="regularPrice"></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Weight (kg) <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="weight"></div>
                                    </div>
                                      <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Current Stock <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="stock"></div>
                                        </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Max Qty Purchase <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="maxQtyPurchase"></div>
                                    </div>

                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Category <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group">
                                            <RadzenDropDown AllowClear="true" TValue="int" Data=@allCategories TextProperty="Name" ValueProperty="CategoryId" Class="w-100" @bind-Value="selectCat" />
                                        </div>
                                        @foreach (var cat in selectedCatList)
                                        {
                                            <div class="row mb-4">
                                                <div class="col-10">
                                                    @cat.Name
                                                </div>
                                                <div class="col-2">
                                                    <button class="btn btn-danger delBtn" @onclick="() => DelCat(cat.CategoryId)"><i class="fas fa-times"></i></button>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Active Status <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <RadzenRadioButtonList @bind-Value=@activeStatus TValue="int">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Active" Value="1" />
                                                <RadzenRadioButtonListItem Text="Not Active" Value="0" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Online Status <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <RadzenRadioButtonList @bind-Value=@onlineStatus TValue="int">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Online" Value="1" />
                                                <RadzenRadioButtonListItem Text="Not Online" Value="0" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Main Image <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group">
                                            @if (isUpdate)
                                            {
                                                <img src="@image" class="itemUpdateImage" />
                                            }
                                            <InputFile OnChange="fileChange" />
                                            <p>@imageName</p>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Extra Image <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group">
                                            @if (isUpdate)
                                            {
                                                foreach (var imgPath in imagePathsUpdate)
                                                {
                                                    <div class="row mb-2">
                                                        <div class="col-8">
                                                            <img src="@imgPath" class="itemUpdateImage" />
                                                        </div>
                                                        <div class="col-4">
                                                            <button class="btn btn-danger" @onclick="() => RemoveImg(imgPath)">Remove</button>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            <InputFile OnChange="fileChange2" multiple />
                                            <p>@imageName2</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm"></label></div>
                                    </div>
                                    <div class="col-md-3 col-12 justify-content-end">
                                        @if (isUpdate)
                                        {
                                            <button type="submit" class="btn btn-primary  me-1" @onclick="UpdateItem">Update</button>
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn btn-primary  me-1" @onclick="AddItem">Save</button>
                                        }
                                        <button type="reset" class="btn btn-light-secondary" @onclick="Clear">Reset</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <p>@status</p>
                        <div class="card-header">
                            <h4 class="card-title">Existing Items</h4>
                        </div>

                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-sm-12 my-2">
                                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                                                        Data="@allProducts" TItem="Product" LogicalFilterOperator="LogicalFilterOperator.Or">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="Product" Property="name" Title="Name" Width="150px" />
                                                <RadzenDataGridColumn TItem="Product" Property="ItemCode" Title="Item Code" />
                                                <RadzenDataGridColumn TItem="Product" Property="RegularPrice" Title="Regular Price" />
                                                <RadzenDataGridColumn TItem="Product" Property="SellingPrice" Title="Selling Price" />
                                                <RadzenDataGridColumn TItem="Product" Property="IsActive" Title="Active" />
                                                <RadzenDataGridColumn TItem="Product" Property="IsOnline" Title="Online" />
                                                <RadzenDataGridColumn TItem="Product" Title="Action" Context="product">
                                                    <Template>
                                                        <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Edit(product.productId)) Text="Edit" ButtonStyle="ButtonStyle.Secondary" />
                                                    </Template>

                                                </RadzenDataGridColumn>
                                                @*                                                <RadzenDataGridColumn TItem="Function" Title="Action" Context="function">
                                                        <Template>
                                                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Delete(function.FunctionID)) Text="Delete" ButtonStyle="ButtonStyle.Danger" />
                                                        </Template>

                                                    </RadzenDataGridColumn>*@
                                            </Columns>
                                        </RadzenDataGrid>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </section>
    </div>

    <footer>
        <div class="clearfix mb-0 text-muted">
            <div class="float-start">
                <p>@year &copy; MSL Admin</p>
            </div>
            <div class="float-end">
                <p>
                    Powered by <a href="http://melstasoft.com/">Bellvantage Pvt Litd</a>
                </p>
            </div>
        </div>
    </footer>
</div>


@code {

    private string status { get; set; } = "";
    private bool isUpdate { get; set; } = false;
    private string sku { get; set; }
    private string name { get; set; }
    private string description { get; set; }
    private double sellingPrice { get; set; }
    private double regularPrice { get; set; }
    private double weight { get; set; }
    private double stock { get; set; } = 0;
    private double cost { get; set; }
    private string image { get; set; }
    private string imageName { get; set; } = "";
    private string imageName2 { get; set; } = "";
    private List<string> imagePaths { get; set; } = new List<string>();
    private List<string> imageTimestamps { get; set; } = new List<string>();
    private List<string> imagePathsUpdate { get; set; } = new List<string>();
    private int maxQtyPurchase { get; set; }
    private int activeStatus { get; set; } = 1;
    private int onlineStatus { get; set; } = 1;
    private int selectCat { get; set; } = 0;
    private IEnumerable<Product> allProducts { get; set; } = new List<Product>();
    private IEnumerable<Category> allCategories { get; set; } = new List<Category>();
    private List<Category> selectedCatList = new List<Category>();
    private IEnumerable<Outlet> allOutlets { get; set; } = new List<Outlet>();
    DateTime myDateTime = DateTime.Now;
    string year;
    int progress;
    IFileListEntry file;
    IFileListEntry[] otherFiles;
    string errMsg { get; set; } = "";
    int successStatus = 1;
    Product editProduct { get; set; }
    private AdminLogin User { get; set; }

    AppSettingsApi appSettingsApi { get; set; }

    protected override void OnInitialized()
    {
        year = myDateTime.Year.ToString();
        appSettingsApi = Configuration.GetSection("ApiLinks").Get<AppSettingsApi>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            User = await localStore.GetItemAsync<AdminLogin>("user");
            await JSRuntime.InvokeAsync<object>("sidenavOpenClose");
            if (User == null)
            {
                NavManager.NavigateTo("/");
            }
            //await JSRuntime.InvokeAsync<object>("Charts");
            allProducts = new List<Product>();
            allProducts = (await apiService.GetAllProducts()).ToList();
            allCategories = new List<Category>();
            allCategories = (await apiService.GetAllCategories()).ToList();
            allOutlets = (await apiService.GetAllOutlets()).ToList();
            StateHasChanged();
        }
    }

    private void OnChange(object value, string name)
    {
        var cat = allCategories.Where(a => a.CategoryId == selectCat).FirstOrDefault<Category>();

        if (!selectedCatList.Contains(cat))
            selectedCatList.Add(cat);

        selectCat = 0;
    }

    private void DelCat(int catId)
    {
        var cat = allCategories.Where(a => a.CategoryId == catId).FirstOrDefault<Category>();
        selectedCatList.Remove(cat);
    }

    private async void Edit(int productId)
    {
        ClearNormal();
        editProduct = allProducts.Where(a => a.productId == productId).FirstOrDefault();
        isUpdate = true;
        sku = editProduct.ItemCode;
        name = editProduct.name;
        description = editProduct.Description;
        sellingPrice = editProduct.SellingPrice;
        regularPrice = editProduct.RegularPrice;
        cost = editProduct.Cost;
        maxQtyPurchase = editProduct.MaxQtyPurchase;
        activeStatus = editProduct.IsActive;
        onlineStatus = editProduct.IsOnline;
        weight = editProduct.Weight;
        stock = editProduct.CurrentStock;
        image = editProduct.ImageUrl;
        imageName = "";
        selectCat = editProduct.ProductCategoryId;

        var itemImages = await apiService2.GetItemImages(productId);

        imagePathsUpdate = new List<string>(itemImages.imagePath);
        imagePaths = new List<string>(itemImages.imagePath);
        StateHasChanged();
    }

    private void fileChange(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        image = "";
        imageName = file.Name;
    }
    private void fileChange2(IFileListEntry[] files)
    {
        otherFiles = files;
        if (!isUpdate)
        {
            imagePaths.Clear();
        }
        imageName2 = "";
        foreach (var file in files)
        {
            imageName2 += file.Name + ", ";
            var Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds().ToString();
            imageTimestamps.Add(Timestamp);
            imagePaths.Add(appSettingsApi.websiteLink+"/images/PRODUCT_IMAGES/" + Timestamp+"-"+file.Name);
        }
    }

    private void RemoveImg(string img)
    {
        imagePaths.Remove(img);
        imagePathsUpdate.Remove(img);
        StateHasChanged();
    }

    private async Task<int> UploadFile(string time)
    {
        if (file != null)
        {

            string contentType = file.Type;

            string[] extension = file.Name.Split('.');

            if (!extension[extension.Length - 1].ToLower().Equals("jpg") && !extension[extension.Length - 1].ToLower().Equals("jpeg") && !extension[extension.Length - 1].ToLower().Equals("png"))
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Invalid File Type!");
                return 0;
            }
            else
            {
                string curFile = fileUpload.FilePathSlip(file);
                @*     if (File.Exists(curFile))
                    {
                        File.Delete(curFile);
                        }*@
            await fileUpload.UploadSlipAsync(file,time);
            return 1;

        }
        //return 1;

    }
    return 0;
}

private async Task<int> UploadFiles2()
{
    if (otherFiles != null)
    {
        int i = 0;
        foreach (var file in otherFiles)
        {

            string contentType = file.Type;

            string[] extension = file.Name.Split('.');

            if (!extension[extension.Length - 1].ToLower().Equals("jpg") && !extension[extension.Length - 1].ToLower().Equals("jpeg") && !extension[extension.Length - 1].ToLower().Equals("png"))
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Invalid File Type!");
            }
            else
            {
                string curFile = fileUpload.FilePathSlip(file);

                await fileUpload.UploadSlipAsync(file,imageTimestamps[i]);
                i++;
            }

        }
        return 1;
    }
    return 0;
}

private async void AddItem()
{
    if (sku == "" || sku == null || name == "" || name == null)
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required Fields Cannot be Empty!");
    }
    else if(file == null)
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Main Image Cannot be Empty!");
    }
    else if (cost < 0 || sellingPrice < 0 || regularPrice < 0 || weight < 0 || stock < 0 || maxQtyPurchase < 0)
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Numbers Cannot Contain Minus Values!");
    }
    else
    {
        Product newItem = new Product();
        newItem.ItemCode = sku;
        newItem.name = name.Replace("'", "''");
        newItem.CompanyId = 1;
        newItem.Cost = cost;
        newItem.SellingPrice = sellingPrice;
        newItem.RegularPrice = regularPrice;
        newItem.UOMId = 2;
        newItem.IsActive = activeStatus;
        newItem.MaxQtyPurchase = maxQtyPurchase;
        newItem.IsOnline = onlineStatus;
        newItem.ProductCategoryId = selectCat;
        string Timestamp = "";

        Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds().ToString();
        newItem.ImageUrl = appSettingsApi.websiteLink+"/images/PRODUCT_IMAGES/" + Timestamp + "-" + file.Name;

        newItem.IsSathosa = 0;
        if (description != null && description != "")
        {
            newItem.Description = description.Replace("'", "''");
        }
        else
        {
            newItem.Description = description;
        }
        newItem.Weight = weight;
        newItem.CurrentStock = stock;

        //status = await apiService.AddItem(newItem);
        var a = await UploadFile(Timestamp);
        var b = 0;
        if (otherFiles != null && otherFiles.Count() > 0)
        {
            b = await UploadFiles2();
        }
        if (a == 1)
        {
            string status = await apiService2.AddItem(newItem);
            status = status.Remove(status.Length - 1, 1);
            int itemId = Convert.ToInt32(status.Split("-")[1]);
            foreach (var outlet in allOutlets)
            {
                OutletItem outletItem = new OutletItem();
                outletItem.OutletId = outlet.OutletId;
                outletItem.ItemId = itemId;
                outletItem.CurrentStock = stock;
                outletItem.UnitPrice = sellingPrice;
                await apiService2.AddOutletItem(outletItem);
            }

            if (otherFiles != null && otherFiles.Count() > 0)
            {
                var itemImages = new ItemImages();
                itemImages.itemId = itemId;
                itemImages.imagePath = imagePaths;
                await apiService2.AddItemImages(itemImages);
            }

            await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Item Added Successfully!");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Image Upload Failed!");
        }
        Clear();
    }
}

private async void UpdateItem()
{
    if (name == "" || name == null)
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required Fields Cannot be Empty!");
    }
    else if (cost < 0 || sellingPrice < 0 || regularPrice < 0 || weight < 0 || stock < 0 || maxQtyPurchase < 0)
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Numbers Cannot Contain Minus Values!");
    }
    else
    {
        editProduct.name = name.Replace("'", "''");
        editProduct.Cost = cost;
        editProduct.SellingPrice = sellingPrice;
        editProduct.RegularPrice = regularPrice;
        editProduct.IsActive = activeStatus;
        editProduct.MaxQtyPurchase = maxQtyPurchase;
        editProduct.IsOnline = onlineStatus;
        editProduct.ProductCategoryId = selectCat;
        if (imageName != "")
        {
            string Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds().ToString();
            editProduct.ImageUrl = appSettingsApi.websiteLink+"/images/PRODUCT_IMAGES/" + Timestamp + "-" + file.Name;
            //imagePaths.Add("https://adminpanel-mothersl.melstasoft.com/images/PRODUCT_IMAGES/" + file.Name);
            await UploadFile(Timestamp);
        }
        if (otherFiles != null && otherFiles.Count() > 0)
        {
            await UploadFiles2();
        }

        //editProduct.IsSathosa = 0;
        if (description != null && description != "")
        {
            editProduct.Description = description.Replace("'", "''");
        }
        else
        {
            editProduct.Description = description;
        }
        editProduct.Weight = weight;
        editProduct.CurrentStock = stock;

        await apiService2.UpdateItem(editProduct);
        var itemImages = new ItemImages();
        itemImages.itemId = editProduct.productId;
        itemImages.imagePath = imagePaths;
        await apiService2.AddItemImages(itemImages);
        await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Item Updated Successfully!");
        Clear();
    }
}

private async void Clear()
{
    isUpdate = false;
    sku = null;
    name = null;
    description = null;
    sellingPrice = 0;
    regularPrice = 0;
    cost = 0;
    maxQtyPurchase = 0;
    activeStatus = 1;
    onlineStatus = 1;
    weight = 0;
    stock = 0;
    image = null;
    otherFiles = null;
    imageName = "";
    imageName2 = "";
    selectCat = 0;
    editProduct = null;
    allProducts = new List<Product>();
    allProducts = (await apiService2.GetAllProducts()).ToList();
    imagePaths.Clear();
    imageTimestamps.Clear();
    StateHasChanged();
}
private void ClearNormal()
{
    isUpdate = false;
    sku = null;
    name = null;
    description = null;
    sellingPrice = 0;
    regularPrice = 0;
    cost = 0;
    maxQtyPurchase = 0;
    activeStatus = 1;
    onlineStatus = 1;
    weight = 0;
    stock = 0;
    image = null;
    otherFiles = null;
    imageName = "";
    imageName2 = "";
    selectCat = 0;
    editProduct = null;
    imagePaths.Clear();
    imageTimestamps.Clear();
    StateHasChanged();
}
}
