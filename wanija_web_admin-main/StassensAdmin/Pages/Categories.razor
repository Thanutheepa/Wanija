@page "/categories"

@inject IJSRuntime JSRuntime
@inject IApiService apiService
@inject IFileUpload fileUpload
@inject IConfiguration Configuration

<SideMenu activeValue="categories" />

<div id="main">
    <header class="mb-3">
        <button class="btn sidenavOpen burger-btn d-block d-xl-none">
            <i class="bi bi-justify fs-3"></i>
        </button>
    </header>

    <div class="page-heading">

        <div class="page-title">
            <div class="row">
                <div class="col-12 col-md-6 order-md-1 order-last">
                    <h3>Categories</h3>
                </div>
                <div class="col-12 col-md-6 order-md-2 order-first">
                    <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Categories</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>

        <section id="multiple-column-form">
            <div class="row match-height">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            @if (isUpdate)
                            {
                                <h4 class="card-title">Update Category</h4>
                            }
                            else
                            {
                                <h4 class="card-title">New Category</h4>
                            }
                        </div>

                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Category Name <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="name"></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Image <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group">
                                            @if (isUpdate)
                                            {
                                                <img src="@image" class="itemUpdateImage" />
                                            }
                                            <InputFile OnChange="fileChange" />
                                            <p>@imageName</p>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Description <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><textarea class="form-control" maxlength="3000" @bind="description"></textarea></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Is Donation <span class="text-danger"></span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <RadzenRadioButtonList @bind-Value=@isDonation TValue="int">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Yes" Value="1" />
                                                <RadzenRadioButtonListItem Text="No" Value="0" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm"></label></div>
                                    </div>
                                    <div class="col-md-3 col-12 justify-content-end">
                                        @if (isUpdate)
                                        {
                                            <button type="submit" class="btn btn-primary  me-1" @onclick="UpdateItem">Update</button>
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn btn-primary  me-1" @onclick="AddItem">Save</button>
                                        }
                                        <button type="reset" class="btn btn-light-secondary ">Reset</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card-header">
                            <h4 class="card-title">Existing Categories</h4>
                        </div>

                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-sm-12 my-2">
                                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                                                        Data="@allCategories" TItem="Category" LogicalFilterOperator="LogicalFilterOperator.Or">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="Category" Property="Name" Title="Name" />
                                                <RadzenDataGridColumn TItem="Category" Property="ImageUrl" Title="Image Url" />
                                                <RadzenDataGridColumn TItem="Category" Property="Description" Title="Description" />
                                                <RadzenDataGridColumn TItem="Category" Title="Action" Context="category">
                                                    <Template>
                                                        <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Edit(category)) Text="Edit" ButtonStyle="ButtonStyle.Secondary" />
                                                    </Template>

                                                </RadzenDataGridColumn>
                                                @*         <RadzenDataGridColumn TItem="Function" Title="Action" Context="function">
                                                        <Template>
                                                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Delete(function.FunctionID)) Text="Delete" ButtonStyle="ButtonStyle.Danger" />
                                                        </Template>

                                                    </RadzenDataGridColumn>*@
                                            </Columns>
                                        </RadzenDataGrid>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </section>
    </div>

    <footer>
        <div class="clearfix mb-0 text-muted">
            <div class="float-start">
                <p>@year &copy; MSL Admin</p>
            </div>
            <div class="float-end">
                <p>
                    Powered by <a href="http://melstasoft.com/">Bellvantage Pvt Litd</a>
                </p>
            </div>
        </div>
    </footer>
</div>


@code {

    private bool isUpdate { get; set; } = false;
    private string name { get; set; } = "";
    private string description { get; set; } = "";
    private string image { get; set; } = "";
    private int isDonation { get; set; } = 0;

    private IEnumerable<Category> allCategories { get; set; }
    IFileListEntry file;
    private string imageName { get; set; } = "";

    DateTime myDateTime = DateTime.Now;
    string year;

    private Category updateCat { get; set; }

    AppSettingsApi appSettingsApi { get; set; }

    protected override void OnInitialized()
    {
        year = myDateTime.Year.ToString();
        appSettingsApi = Configuration.GetSection("ApiLinks").Get<AppSettingsApi>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeAsync<object>("Charts");
            await JSRuntime.InvokeAsync<object>("sidenavOpenClose");
            allCategories = new List<Category>();
            allCategories = (await apiService.GetAllCategories()).ToList();
            StateHasChanged();
        }
    }

    void Edit(Category category)
    {
        updateCat = category;
        isUpdate = true;
        name = category.Name;
        description = category.Description;
        image = category.ImageUrl;
        isDonation = category.IsDonation;
    }

    private void fileChange(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        image = "";
        imageName = file.Name;
    }
    private async Task<int> UploadFile()
    {
        if (file != null)
        {

            string contentType = file.Type;

            string[] extension = file.Name.Split('.');

            if (!extension[extension.Length - 1].ToLower().Equals("jpg") && !extension[extension.Length - 1].ToLower().Equals("jpeg") && !extension[extension.Length - 1].ToLower().Equals("png"))
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Invalid File Type!");
                return 0;
            }
            else
            {
                @*     if (File.Exists(curFile))
                    {
                        File.Delete(curFile);
                    }*@
            await fileUpload.UploadCatAsync(file);
            return 1;

        }
        //return 1;

    }
    return 0;
}

private async void AddItem()
{
    if (name == "")
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required Fields Cannot be Empty!");
    }
    else if (allCategories.Where(a => a.Name.ToLower() == name.ToLower()).ToList().Count() > 0)
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "This Category is Already Added!");
    }
    else
    {
        Category newCat = new Category();
        newCat.Name = name;
        if (description != null && description != "")
        {
            newCat.Description = description.Replace("'", "''");
        }
        else
        {
            newCat.Description = description;
        }
        newCat.IsDonation = isDonation;
        if (file == null)
        {
            newCat.ImageUrl = "";
        }
        else
        {
            newCat.ImageUrl = appSettingsApi.websiteLink+"/images/Category_Images/" + file.Name;
        }

        //status = await apiService.AddItem(newItem);
        var a = await UploadFile();
        string status = await apiService.AddNewCategory(newCat);

        await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Category Added Successfully!");
        Clear();
        StateHasChanged();
    }
}
private async void UpdateItem()
{
    if (name == "")
    {
        await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required Fields Cannot be Empty!");
    }
    else
    {
        updateCat.Name = name;
        if (description != null && description != "")
        {
            updateCat.Description = description.Replace("'", "''");
        }
        else
        {
            updateCat.Description = description;
        }
        updateCat.IsDonation = isDonation;
        if (imageName != "")
        {
            updateCat.ImageUrl = appSettingsApi.websiteLink+"/images/Category_Images/" + file.Name;
            await UploadFile();
        }

        //status = await apiService.AddItem(newItem);
        var a = await UploadFile();
        string status = await apiService.UpdateCategory(updateCat);

        await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Category Update Successfully!");
        Clear();
        StateHasChanged();
    }
}

private async void Clear()
{
    isUpdate = false;
    name = "";
    description = "";
    image = "";
    imageName = "";
    isDonation = 0;
    file = null;
    allCategories = new List<Category>();
    allCategories = (await apiService.GetAllCategories()).ToList();
    StateHasChanged();
}
}
