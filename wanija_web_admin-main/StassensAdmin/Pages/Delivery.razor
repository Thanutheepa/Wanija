@page "/delivery"

@inject IJSRuntime JSRuntime
@inject IApiService apiService

<SideMenu activeValue="delivery" />

<div id="main">
    <header class="mb-3">
        <button class="btn sidenavOpen burger-btn d-block d-xl-none">
            <i class="bi bi-justify fs-3"></i>
        </button>
    </header>

    <div class="page-heading">

        <div class="page-title">
            <div class="row">
                <div class="col-12 col-md-6 order-md-1 order-last">
                    <h3>Delivery Fees</h3>
                </div>
                <div class="col-12 col-md-6 order-md-2 order-first">
                    <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Delivery Fees</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>

        <section id="multiple-column-form">
            <div class="row match-height">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            @if (isUpdate)
                            {
                                <h4 class="card-title">Update Delivery Fee</h4>
                            }
                            else
                            {
                                <h4 class="card-title">New Delivery Fee</h4>
                            }
                        </div>

                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3 col-12">
                                        <div class="form-group"><label class="form-control-sm">Select Delivery Type <span class="text-danger">*</span></label></div>
                                    </div>
                                    <div class="col-md-3 col-12">
                                        <div class="form-group">
                                            <select class="form-select" @bind="deliType">
                                                <option value=1>With Weight</option>
                                                <option value=0>Without Weight</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-12"></div>
                                    <div class="col-md-3 col-12"></div>
                                    @if (deliType == 1)
                                    {
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Select Country <span class="text-danger">*</span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group">
                                                <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                                Placeholder="Select Country *" Data=@countryList TextProperty="CountryName" ValueProperty="CountryCode" Change=@OnCountryChange @bind-Value="country" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><button class="btn btn-primary w-100" data-toggle="modal" data-target="#addCountry">Add New Country</button></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Select State <span class="text-danger">*</span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group">
                                                <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                                Placeholder="Select State / Province *" Data=@stateList TextProperty="StateName" ValueProperty="StateCode" @bind-Value="province" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><button class="btn btn-primary w-100" data-toggle="modal" data-target="#addState">Add New State</button></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Weight From <span class="text-danger">*</span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="weightFrom"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Weigh To <span class="text-danger">*</span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="weightTo"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Shipping Fee <span class="text-danger">*</span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="shippingFee"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Description <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><textarea class="form-control form-control-sm" @bind="description"></textarea></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Estimated Dates <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="estimatedDates"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Effective Date <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="date" class="form-control form-control-sm" @bind-value="effectiveDate"></div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Effective Date <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="date" class="form-control form-control-sm" @bind-value="effectiveDate"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Delivery Fee <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="deliveryFee"></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm">Min Order Value <span class="text-danger"></span></label></div>
                                        </div>
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><input type="number" class="form-control form-control-sm" @bind-value="minOrder"></div>
                                        </div>
                                    }
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3 col-12">
                                            <div class="form-group"><label class="form-control-sm"></label></div>
                                        </div>
                                        <div class="col-md-3 col-12 justify-content-end">
                                            @if (isUpdate)
                                            {
                                                <button type="submit" class="btn btn-primary  me-1">Update</button>
                                            }
                                            else
                                            {
                                                <button type="submit" class="btn btn-primary  me-1" @onclick="AddDeliveryFee">Save</button>
                                            }
                                            <button type="reset" class="btn btn-light-secondary" @onclick="Clear">Reset</button>
                                        </div>
                                    </div>
                                </div>
                        </div>

                        <div class="card-header">
                            <h4 class="card-title">Existing Fees</h4>
                        </div>

                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-sm-12 my-2">
                                        @if (deliType == 1 && deliveryFeeLineItemList != null)
                                        {
                                           <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                                                            Data="@deliveryFeeLineItemList" TItem="DeliveryFeeLineItem" LogicalFilterOperator="LogicalFilterOperator.Or">
                                                <Columns>
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="CountryId" Title="Country" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="StateCode" Title="State Code" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="WeightFrom" Title="Weight From" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="WeightTo" Title="Weight To" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="ShippingFee" Title="Shipping Fee" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="EstimateDates" Title="Estimate Dates" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Property="EffectiveDate" Title="Effective Date" />
                                                    <RadzenDataGridColumn TItem="DeliveryFeeLineItem" Title="Action" Context="function">
                                                        <Template>
                                                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => DeleteDeliLineItem(function)) Text="Delete" ButtonStyle="ButtonStyle.Danger" />
                                                        </Template>

                                                    </RadzenDataGridColumn>
                                                </Columns>
                                            </RadzenDataGrid>
                                        }
                                        @if(deliType == 0 && deliveryChargesList != null)
                                        {
                                           <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                                                            Data="@deliveryChargesList" TItem="DeliveryCharges" LogicalFilterOperator="LogicalFilterOperator.Or">
                                                <Columns>
                                                    <RadzenDataGridColumn TItem="DeliveryCharges" Property="DeliveryFee" Title="Delivery Fee" />
                                                    <RadzenDataGridColumn TItem="DeliveryCharges" Property="MinOrderValue" Title="Min Order Value" />
                                                    <RadzenDataGridColumn TItem="DeliveryCharges" Property="EffectiveDate" Title="Effective Date" />
                                                    <RadzenDataGridColumn TItem="DeliveryCharges" Title="Action" Context="function">
                                                        <Template>
                                                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => DeleteDeliCharge(function)) Text="Delete" ButtonStyle="ButtonStyle.Danger" />
                                                        </Template>

                                                    </RadzenDataGridColumn>
                                                </Columns>
                                            </RadzenDataGrid>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </section>
    </div>

    <footer>
        <div class="clearfix mb-0 text-muted">
            <div class="float-start">
                <p>@year &copy; MSL Admin</p>
            </div>
            <div class="float-end">
                <p>
                    Powered by <a href="http://melstasoft.com/">Bellvantage Pvt Litd</a>
                </p>
            </div>
        </div>
    </footer>
</div>

<!-- The Modal -->
<div class="modal" id="addCountry">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">New Country</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6 col-12">
                        <div class="form-group"><label class="form-control-sm">3 Digit Country Code <span class="text-danger">*</span></label></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><input type="text" class="form-control form-control-sm" @oninput="CountryCodeChange"></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><label class="form-control-sm">2 Digit Country Code <span class="text-danger">*</span></label></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="countryCode2"></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><label class="form-control-sm">Country Name <span class="text-danger">*</span></label></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="countryName"></div>
                    </div>
                    <div class="col-12">
                        <button class="btn btn-primary w-100" @onclick="AddCountry">Add Country</button>
                    </div>
                </div>
            </div>

            <!-- Modal footer -->
        @*    <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>*@

        </div>
    </div>
</div>

<div class="modal" id="addState">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">New Country</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6 col-12">
                        <div class="form-group"><label class="form-control-sm">Select County <span class="text-danger">*</span></label></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group">
                            <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                            Placeholder="Select Country *" Data=@countryList TextProperty="CountryName" ValueProperty="CountryCode" Change=@OnCountryChange @bind-Value="countryStateAdd" />
                        </div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><label class="form-control-sm">State Code <span class="text-danger">*</span></label></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="stateCode"></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><label class="form-control-sm">State Name <span class="text-danger">*</span></label></div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="stateName"></div>
                    </div>
                    <div class="col-12">
                        <button class="btn btn-primary w-100" @onclick="AddState">Add State</button>
                    </div>
                </div>
            </div>

            <!-- Modal footer -->
        @*    <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>*@

        </div>
    </div>
</div>

@code {

    private bool isUpdate { get; set; } = false;
    private double weightFrom { get; set; }
    private double weightTo { get; set; }
    private double shippingFee { get; set; }
    private string description { get; set; }
    private string estimatedDates { get; set; }
    private string province { get; set; } = "";
    private string country { get; set; } = "";


    private string countryCode3 { get; set; } = "";
    private string countryCode2 { get; set; } = "";
    private string countryName { get; set; } = "";

    private string countryStateAdd { get; set; } = "";
    private string stateCode { get; set; } = "";
    private string stateName { get; set; } = "";
    private int deliType { get; set; } = 1;
    private double deliveryFee { get; set; } = 0;
    private double minOrder { get; set; } = 0;

    private List<Country> countryList { get; set; }
    private List<State> stateList { get; set; }

    DateTime myDateTime = DateTime.Now;
    string year;

    private DateTime effectiveDate { get; set; } = DateTime.Now;

    private List<DeliveryFeeLineItem> deliveryFeeLineItemList;
    private List<DeliveryCharges> deliveryChargesList;

    protected override void OnInitialized()
    {
        year = myDateTime.Year.ToString();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeAsync<object>("Charts");
            countryList = new List<Country>();
            //countryList = (await apiService.GetCountries()).ToList();
            deliveryFeeLineItemList = new List<DeliveryFeeLineItem>();
            deliveryFeeLineItemList = (await apiService.GetAllDeliveryFeeLineItem()).ToList();
            deliveryChargesList = new List<DeliveryCharges>();
            deliveryChargesList = (await apiService.GetAllDeliveryFee()).ToList();
            await JSRuntime.InvokeAsync<object>("sidenavOpenClose");
            StateHasChanged();
        }
    }


    private void OnCountryChange()
    {
        stateList = new List<State>();
        if (country != String.Empty && country != "" && country != null)
        {
            stateList = countryList.Where(a => a.CountryCode == country).FirstOrDefault<Country>().ListState;
        }
    }

    private async void AddDeliveryFee()
    {
        string error = "";
        int check = 0;
        if (deliType == 1)
        {
            if (country == "" || province == "")
            {
                check = 1;
                error += "* Please select country and state.\n";
            }
            if (weightFrom < 0 || (weightFrom > weightTo) || weightTo < 0)
            {
                check = 1;
                error += "* Invalid weights.\n";
            }
            if (shippingFee < 0)
            {
                check = 1;
                error += "* Invalid shipping fee.\n";
            }

            if (check == 1)
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", error);
            }
            else
            {
                DeliveryFeeLineItem deliveryFee = new DeliveryFeeLineItem();
                deliveryFee.CountryId = country;
                deliveryFee.WeightFrom = weightFrom;
                deliveryFee.WeightTo = weightTo;
                deliveryFee.ShippingFee = shippingFee;
                deliveryFee.Description = description;
                deliveryFee.EstimateDates = estimatedDates;
                deliveryFee.StateCode = province;
                deliveryFee.EffectiveDate = effectiveDate;

                String stat = await apiService.AddDeliveryFee(deliveryFee);
                if (stat == "\"Delivery Charge added successfully.\"")
                {
                    await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Successfully Added!");
                    Clear();
                }
                else
                    await JSRuntime.InvokeAsync<object>("Alert", "error", "", stat);
            }
        }
        else if(deliType == 0)
        {
            if (deliveryFee < 0)
            {
                check = 1;
                error += "* Delivery fee must be greater than or equal to 0.\n";
            }
            if (minOrder < 0)
            {
                check = 1;
                error += "* Min order valu must be greater than or equal to 0.\n";
            }

            if (check == 1)
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", error);
            }
            else
            {
                DeliveryCharges deliveryCharges = new DeliveryCharges();
                deliveryCharges.DeliveryChargeId = 0;
                deliveryCharges.EffectiveDate = effectiveDate;
                deliveryCharges.DeliveryFee = deliveryFee;
                deliveryCharges.MinOrderValue =Convert.ToInt32(minOrder);

                String stat = await apiService.AddDeliveryCharges(deliveryCharges);
                if (stat == "\"Delivery Charge updated successfully.\"")
                {
                    await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Successfully Added!");
                    Clear();
                }
                else
                    await JSRuntime.InvokeAsync<object>("Alert", "error", "", stat);
            }
        }
    }

    private void CountryCodeChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        countryCode3 = (string)args.Value;
        if (countryCode3.Length > 2)
        {
            countryCode2 = countryCode3.Substring(0, 2);
        }
        else
        {
            countryCode2 = countryCode3;
        }
    }

    private async void AddCountry()
    {
        if(countryCode3 == "" || countryCode2 == "" || countryName == "")
        {
            await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required fields cannot be blank!");
        }
        else
        {
            Country newCountry = new Country();
            newCountry.CountryCode = countryCode3;
            newCountry.CountryName = countryName;
            newCountry.CountryCode2 = countryCode2;
            await apiService.AddNewCountry(newCountry);
            Clear();
            await JSRuntime.InvokeAsync<object>("CloseModal", "addCountry");
        }
    }

    private async void AddState()
    {
        if(countryStateAdd == "" || stateCode == "" || stateName == "")
        {
            await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required fields cannot be blank!");
        }
        else
        {
            State newState = new State();
            newState.CountryCode = countryStateAdd;
            newState.StateCode = stateCode;
            newState.StateName = stateName;
            await apiService.AddNewState(newState);
            Clear();
            await JSRuntime.InvokeAsync<object>("CloseModal", "addState");
        }
    }

    private async void DeleteDeliLineItem(DeliveryFeeLineItem item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            String stat = await apiService.DeleteDeliveryFeeLineItem(item);
            if (stat == "\"Deleted successfully.\"")
            {
                await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Successfully Deleted!");
                Clear();
            }
            else
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", stat);
        }
    }
    private async void DeleteDeliCharge(DeliveryCharges item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            String stat = await apiService.DeleteDeliveryCharge(item);
            if (stat == "\"Deleted successfully.\"")
            {
                await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Successfully Deleted!");
                Clear();
            }
            else
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", stat);
        }
    }

    private async void Clear()
    {
        weightFrom = 0;
        weightTo = 0;
        shippingFee = 0;
        description = "";
        estimatedDates = "";
        country = "";
        province = "";
        countryCode2 = "";
        countryCode3 = "";
        countryName = "";
        countryStateAdd = "";
        stateCode = "";
        stateName = "";
        countryList = new List<Country>();
        stateList = new List<State>();
        //countryList = (await apiService.GetCountries()).ToList();
        deliveryFeeLineItemList = new List<DeliveryFeeLineItem>();
        deliveryFeeLineItemList = (await apiService.GetAllDeliveryFeeLineItem()).ToList();
        deliveryChargesList = new List<DeliveryCharges>();
        deliveryChargesList = (await apiService.GetAllDeliveryFee()).ToList();
        deliType = 1;
        deliveryFee = 0;
        minOrder = 0;
        StateHasChanged();
    }

}
