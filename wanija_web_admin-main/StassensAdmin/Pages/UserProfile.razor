@page "/UserProfile"
@inject ILocalStorageService localStore
@inject IJSRuntime JSRuntime
@inject IApiService ApiService
@inject IApiService ApiService2

<SideMenu activeValue="UserProfile" />

<div id="main">

    <header class="mb-3">
        <button class="btn sidenavOpen burger-btn d-block d-xl-none">
            <i class="bi bi-justify fs-3"></i>
        </button>
    </header>
    <div class="page-heading">

        <div class="page-title">
            <div class="row">
                <div class="col-12 col-md-6 order-md-1 order-last">
                    <h3>User Profile</h3>
                </div>
                <div class="col-12 col-md-6 order-md-2 order-first">
                    <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                            <li class="breadcrumb-item active" aria-current="page">User Profile</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>

    </div>
    <section id="multiple-column-form">

        <div class="row match-height">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h4>Personal Information </h4>
                    </div>
                    <div class="card-content">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3 col-12">
                                    <div class="form-group"><label class="form-control-sm">Current User Name <span class="text-danger">*</span></label></div>
                                </div>
                                <div class="col-md-3 col-12">
                                    <div class="form-group"><input type="text" class="form-control form-control-sm" @bind-value="UserName"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3 col-12">

                                </div>
                                <div class="col-md-3 col-12">
                                    <button type="submit" class="btn btn-primary  me-1" @onclick="UpdateUsername">Update</button>
                                    <button type="reset" class="btn btn-light-secondary " @onclick="Cancel">Cancel</button>
                                </div>


                            </div>
                        </div>
                    </div>

                    <div class="card-header">
                        <h4>Change Password </h4>
                    </div>
                    <div class="card-content">
                        <div class="card-body">
                            <div class="row">

                                <div class="col-md-3 col-12">
                                    <div class="form-group"><label class="form-control-sm">Type New Password <span class="text-danger">*</span></label></div>
                                </div>
                                <div class="col-md-3 col-12">
                                    <div class="form-group"><input type="text" @bind-value="NewPassword" class="form-control form-control-sm"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3 col-12">
                                    <div class="form-group"><label class="form-control-sm">Re-type Password <span class="text-danger">*</span></label></div>
                                </div>
                                <div class="col-md-3 col-12">
                                    <div class="form-group"><input type="text" @bind-value="RetypePassword" class="form-control form-control-sm"></div>
                                </div>
                                <div class="col-md-3 col-12">
                                    <button type="submit" class="btn btn-primary  me-1" @onclick="UpdatePassword">Update</button>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </section>

    <footer>
        <div class="clearfix mb-0 text-muted">
            <div class="float-start">
                <p>@year &copy; MSL Admin</p>
            </div>
            <div class="float-end">
                <p>
                    Powered by <a href="http://melstasoft.com/">Bellvantage Pvt Litd</a>
                </p>
            </div>
        </div>
    </footer>

</div>

@code {


    DateTime myDateTime = DateTime.Now;
    string year;

    private AdminLogin user = new AdminLogin();
    private string UserName;
    private string Password;
    private int id;
    private string NewPassword;
    private string NewUserName;
    private string RetypePassword;

    private User userChanged = new User();

    private string msg;

    protected override async Task OnInitializedAsync()
    {
        year = myDateTime.Year.ToString();
        user = await localStore.GetItemAsync<AdminLogin>("user");
        UserName = user.UserName;
        Password = user.Password;
        id = user.ID;

    }

    private async void UpdateUsername()
    {
        userChanged.ID = id;
        userChanged.UserName = UserName;
        StateHasChanged();


        if (UserName == null)
        {
            await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required Fields Cannot be Empty!");
        }


        else
        {

            msg = await ApiService2.UpdateUserName(userChanged);
            StateHasChanged();
            if (msg == "\"User Updated successfully.\"")
            {
                await JSRuntime.InvokeAsync<object>("Alert", "success", "", "User Updated successfully.");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", msg);
            }
        }

    }

    private async void UpdatePassword()
    {
        userChanged.ID = id;
        userChanged.Password = NewPassword;

        if (NewPassword == null)
        {
            await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Required Fields Cannot be Empty!");
        }

        else if (NewPassword != RetypePassword)
        {
            await JSRuntime.InvokeAsync<object>("Alert", "error", "", "Password is not matched");
        }

        else
        {

            msg = await ApiService.UpdatePassword(userChanged);
            StateHasChanged();
            clear();
            StateHasChanged();
            if (msg == "\"Password Updated successfully.\"")
            {
                await JSRuntime.InvokeAsync<object>("Alert", "success", "", "Password Reset successfully.");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("Alert", "error", "", msg);
            }
        }

    }

    private void Cancel()
    {
        UserName = user.UserName;
    }

    private void clear()
    {
        NewPassword = null;
        RetypePassword = null;
    }



}
